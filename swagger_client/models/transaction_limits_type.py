# coding: utf-8

"""
    Semux API

    Semux is an experimental high-performance blockchain platform that powers decentralized application.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionLimitsType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_transaction_data_size': 'int',
        'min_transaction_fee': 'str',
        'min_delegate_burn_amount': 'str'
    }

    attribute_map = {
        'max_transaction_data_size': 'maxTransactionDataSize',
        'min_transaction_fee': 'minTransactionFee',
        'min_delegate_burn_amount': 'minDelegateBurnAmount'
    }

    def __init__(self, max_transaction_data_size=None, min_transaction_fee=None, min_delegate_burn_amount=None):  # noqa: E501
        """TransactionLimitsType - a model defined in Swagger"""  # noqa: E501

        self._max_transaction_data_size = None
        self._min_transaction_fee = None
        self._min_delegate_burn_amount = None
        self.discriminator = None

        if max_transaction_data_size is not None:
            self.max_transaction_data_size = max_transaction_data_size
        if min_transaction_fee is not None:
            self.min_transaction_fee = min_transaction_fee
        if min_delegate_burn_amount is not None:
            self.min_delegate_burn_amount = min_delegate_burn_amount

    @property
    def max_transaction_data_size(self):
        """Gets the max_transaction_data_size of this TransactionLimitsType.  # noqa: E501


        :return: The max_transaction_data_size of this TransactionLimitsType.  # noqa: E501
        :rtype: int
        """
        return self._max_transaction_data_size

    @max_transaction_data_size.setter
    def max_transaction_data_size(self, max_transaction_data_size):
        """Sets the max_transaction_data_size of this TransactionLimitsType.


        :param max_transaction_data_size: The max_transaction_data_size of this TransactionLimitsType.  # noqa: E501
        :type: int
        """

        self._max_transaction_data_size = max_transaction_data_size

    @property
    def min_transaction_fee(self):
        """Gets the min_transaction_fee of this TransactionLimitsType.  # noqa: E501


        :return: The min_transaction_fee of this TransactionLimitsType.  # noqa: E501
        :rtype: str
        """
        return self._min_transaction_fee

    @min_transaction_fee.setter
    def min_transaction_fee(self, min_transaction_fee):
        """Sets the min_transaction_fee of this TransactionLimitsType.


        :param min_transaction_fee: The min_transaction_fee of this TransactionLimitsType.  # noqa: E501
        :type: str
        """
        if min_transaction_fee is not None and not re.search('^\\d+$', min_transaction_fee):  # noqa: E501
            raise ValueError("Invalid value for `min_transaction_fee`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._min_transaction_fee = min_transaction_fee

    @property
    def min_delegate_burn_amount(self):
        """Gets the min_delegate_burn_amount of this TransactionLimitsType.  # noqa: E501


        :return: The min_delegate_burn_amount of this TransactionLimitsType.  # noqa: E501
        :rtype: str
        """
        return self._min_delegate_burn_amount

    @min_delegate_burn_amount.setter
    def min_delegate_burn_amount(self, min_delegate_burn_amount):
        """Sets the min_delegate_burn_amount of this TransactionLimitsType.


        :param min_delegate_burn_amount: The min_delegate_burn_amount of this TransactionLimitsType.  # noqa: E501
        :type: str
        """
        if min_delegate_burn_amount is not None and not re.search('^\\d+$', min_delegate_burn_amount):  # noqa: E501
            raise ValueError("Invalid value for `min_delegate_burn_amount`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._min_delegate_burn_amount = min_delegate_burn_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionLimitsType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
