# coding: utf-8

"""
    Semux API

    Semux is an experimental high-performance blockchain platform that powers decentralized application.  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiHandlerResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'message': 'str'
    }

    attribute_map = {
        'success': 'success',
        'message': 'message'
    }

    discriminator_value_class_map = {
        'GetInfoResponse': 'GetInfoResponse',
        'DeleteAccountResponse': 'DeleteAccountResponse',
        'GetVoteResponse': 'GetVoteResponse',
        'SignMessageResponse': 'SignMessageResponse',
        'DoTransactionResponse': 'DoTransactionResponse',
        'GetValidatorsResponse': 'GetValidatorsResponse',
        'GetPendingTransactionsResponse': 'GetPendingTransactionsResponse',
        'GetAccountResponse': 'GetAccountResponse',
        'GetAccountVotesResponse': 'GetAccountVotesResponse',
        'AddNodeResponse': 'AddNodeResponse',
        'GetAccountTransactionsResponse': 'GetAccountTransactionsResponse',
        'ListAccountsResponse': 'ListAccountsResponse',
        'GetPeersResponse': 'GetPeersResponse',
        'CreateAccountResponse': 'CreateAccountResponse',
        'ComposeRawTransactionResponse': 'ComposeRawTransactionResponse',
        'GetBlockResponse': 'GetBlockResponse',
        'GetSyncingProgressResponse': 'GetSyncingProgressResponse',
        'GetDelegateResponse': 'GetDelegateResponse',
        'GetVotesResponse': 'GetVotesResponse',
        'GetAccountPendingTransactionsResponse': 'GetAccountPendingTransactionsResponse',
        'GetRootResponse': 'GetRootResponse',
        'GetTransactionLimitsResponse': 'GetTransactionLimitsResponse',
        'VerifyMessageResponse': 'VerifyMessageResponse',
        'GetLatestBlockNumberResponse': 'GetLatestBlockNumberResponse',
        'SignRawTransactionResponse': 'SignRawTransactionResponse',
        'GetTransactionResponse': 'GetTransactionResponse',
        'GetDelegatesResponse': 'GetDelegatesResponse',
        'GetLatestBlockResponse': 'GetLatestBlockResponse'
    }

    def __init__(self, success=None, message=None):  # noqa: E501
        """ApiHandlerResponse - a model defined in Swagger"""  # noqa: E501

        self._success = None
        self._message = None
        self.discriminator = 'ApiHandlerResponse'

        self.success = success
        if message is not None:
            self.message = message

    @property
    def success(self):
        """Gets the success of this ApiHandlerResponse.  # noqa: E501


        :return: The success of this ApiHandlerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ApiHandlerResponse.


        :param success: The success of this ApiHandlerResponse.  # noqa: E501
        :type: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def message(self):
        """Gets the message of this ApiHandlerResponse.  # noqa: E501


        :return: The message of this ApiHandlerResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiHandlerResponse.


        :param message: The message of this ApiHandlerResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiHandlerResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
