# coding: utf-8

"""
    Semux API

    Semux is an experimental high-performance blockchain platform that powers decentralized application.  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SyncingProgressType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'syncing': 'bool',
        'starting_height': 'str',
        'current_height': 'str',
        'target_height': 'str'
    }

    attribute_map = {
        'syncing': 'syncing',
        'starting_height': 'startingHeight',
        'current_height': 'currentHeight',
        'target_height': 'targetHeight'
    }

    def __init__(self, syncing=None, starting_height=None, current_height=None, target_height=None):  # noqa: E501
        """SyncingProgressType - a model defined in Swagger"""  # noqa: E501

        self._syncing = None
        self._starting_height = None
        self._current_height = None
        self._target_height = None
        self.discriminator = None

        self.syncing = syncing
        if starting_height is not None:
            self.starting_height = starting_height
        if current_height is not None:
            self.current_height = current_height
        if target_height is not None:
            self.target_height = target_height

    @property
    def syncing(self):
        """Gets the syncing of this SyncingProgressType.  # noqa: E501

        Whether the node is syncing  # noqa: E501

        :return: The syncing of this SyncingProgressType.  # noqa: E501
        :rtype: bool
        """
        return self._syncing

    @syncing.setter
    def syncing(self, syncing):
        """Sets the syncing of this SyncingProgressType.

        Whether the node is syncing  # noqa: E501

        :param syncing: The syncing of this SyncingProgressType.  # noqa: E501
        :type: bool
        """
        if syncing is None:
            raise ValueError("Invalid value for `syncing`, must not be `None`")  # noqa: E501

        self._syncing = syncing

    @property
    def starting_height(self):
        """Gets the starting_height of this SyncingProgressType.  # noqa: E501

        The block height at which the sync started  # noqa: E501

        :return: The starting_height of this SyncingProgressType.  # noqa: E501
        :rtype: str
        """
        return self._starting_height

    @starting_height.setter
    def starting_height(self, starting_height):
        """Sets the starting_height of this SyncingProgressType.

        The block height at which the sync started  # noqa: E501

        :param starting_height: The starting_height of this SyncingProgressType.  # noqa: E501
        :type: str
        """
        if starting_height is not None and not re.search('^\\d+$', starting_height):  # noqa: E501
            raise ValueError("Invalid value for `starting_height`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._starting_height = starting_height

    @property
    def current_height(self):
        """Gets the current_height of this SyncingProgressType.  # noqa: E501

        The current block height  # noqa: E501

        :return: The current_height of this SyncingProgressType.  # noqa: E501
        :rtype: str
        """
        return self._current_height

    @current_height.setter
    def current_height(self, current_height):
        """Sets the current_height of this SyncingProgressType.

        The current block height  # noqa: E501

        :param current_height: The current_height of this SyncingProgressType.  # noqa: E501
        :type: str
        """
        if current_height is not None and not re.search('^\\d+$', current_height):  # noqa: E501
            raise ValueError("Invalid value for `current_height`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._current_height = current_height

    @property
    def target_height(self):
        """Gets the target_height of this SyncingProgressType.  # noqa: E501

        The target block height  # noqa: E501

        :return: The target_height of this SyncingProgressType.  # noqa: E501
        :rtype: str
        """
        return self._target_height

    @target_height.setter
    def target_height(self, target_height):
        """Sets the target_height of this SyncingProgressType.

        The target block height  # noqa: E501

        :param target_height: The target_height of this SyncingProgressType.  # noqa: E501
        :type: str
        """
        if target_height is not None and not re.search('^\\d+$', target_height):  # noqa: E501
            raise ValueError("Invalid value for `target_height`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._target_height = target_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncingProgressType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
