# coding: utf-8

"""
    Semux API

    Semux is an experimental high-performance blockchain platform that powers decentralized application.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InfoType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'coinbase': 'str',
        'latest_block_number': 'str',
        'latest_block_hash': 'str',
        'active_peers': 'int',
        'pending_transactions': 'int'
    }

    attribute_map = {
        'client_id': 'clientId',
        'coinbase': 'coinbase',
        'latest_block_number': 'latestBlockNumber',
        'latest_block_hash': 'latestBlockHash',
        'active_peers': 'activePeers',
        'pending_transactions': 'pendingTransactions'
    }

    def __init__(self, client_id=None, coinbase=None, latest_block_number=None, latest_block_hash=None, active_peers=None, pending_transactions=None):  # noqa: E501
        """InfoType - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._coinbase = None
        self._latest_block_number = None
        self._latest_block_hash = None
        self._active_peers = None
        self._pending_transactions = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if coinbase is not None:
            self.coinbase = coinbase
        if latest_block_number is not None:
            self.latest_block_number = latest_block_number
        if latest_block_hash is not None:
            self.latest_block_hash = latest_block_hash
        if active_peers is not None:
            self.active_peers = active_peers
        if pending_transactions is not None:
            self.pending_transactions = pending_transactions

    @property
    def client_id(self):
        """Gets the client_id of this InfoType.  # noqa: E501


        :return: The client_id of this InfoType.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this InfoType.


        :param client_id: The client_id of this InfoType.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def coinbase(self):
        """Gets the coinbase of this InfoType.  # noqa: E501


        :return: The coinbase of this InfoType.  # noqa: E501
        :rtype: str
        """
        return self._coinbase

    @coinbase.setter
    def coinbase(self, coinbase):
        """Sets the coinbase of this InfoType.


        :param coinbase: The coinbase of this InfoType.  # noqa: E501
        :type: str
        """

        self._coinbase = coinbase

    @property
    def latest_block_number(self):
        """Gets the latest_block_number of this InfoType.  # noqa: E501


        :return: The latest_block_number of this InfoType.  # noqa: E501
        :rtype: str
        """
        return self._latest_block_number

    @latest_block_number.setter
    def latest_block_number(self, latest_block_number):
        """Sets the latest_block_number of this InfoType.


        :param latest_block_number: The latest_block_number of this InfoType.  # noqa: E501
        :type: str
        """
        if latest_block_number is not None and not re.search('^\\d+$', latest_block_number):  # noqa: E501
            raise ValueError("Invalid value for `latest_block_number`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._latest_block_number = latest_block_number

    @property
    def latest_block_hash(self):
        """Gets the latest_block_hash of this InfoType.  # noqa: E501


        :return: The latest_block_hash of this InfoType.  # noqa: E501
        :rtype: str
        """
        return self._latest_block_hash

    @latest_block_hash.setter
    def latest_block_hash(self, latest_block_hash):
        """Sets the latest_block_hash of this InfoType.


        :param latest_block_hash: The latest_block_hash of this InfoType.  # noqa: E501
        :type: str
        """

        self._latest_block_hash = latest_block_hash

    @property
    def active_peers(self):
        """Gets the active_peers of this InfoType.  # noqa: E501


        :return: The active_peers of this InfoType.  # noqa: E501
        :rtype: int
        """
        return self._active_peers

    @active_peers.setter
    def active_peers(self, active_peers):
        """Sets the active_peers of this InfoType.


        :param active_peers: The active_peers of this InfoType.  # noqa: E501
        :type: int
        """

        self._active_peers = active_peers

    @property
    def pending_transactions(self):
        """Gets the pending_transactions of this InfoType.  # noqa: E501


        :return: The pending_transactions of this InfoType.  # noqa: E501
        :rtype: int
        """
        return self._pending_transactions

    @pending_transactions.setter
    def pending_transactions(self, pending_transactions):
        """Sets the pending_transactions of this InfoType.


        :param pending_transactions: The pending_transactions of this InfoType.  # noqa: E501
        :type: int
        """

        self._pending_transactions = pending_transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfoType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
