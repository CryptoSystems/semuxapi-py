# coding: utf-8

"""
    Semux API

    Semux is an experimental high-performance blockchain platform that powers decentralized application.  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DelegateType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'name': 'str',
        'registered_at': 'str',
        'votes': 'str',
        'blocks_forged': 'str',
        'turns_hit': 'str',
        'turns_missed': 'str',
        'validator': 'bool'
    }

    attribute_map = {
        'address': 'address',
        'name': 'name',
        'registered_at': 'registeredAt',
        'votes': 'votes',
        'blocks_forged': 'blocksForged',
        'turns_hit': 'turnsHit',
        'turns_missed': 'turnsMissed',
        'validator': 'validator'
    }

    def __init__(self, address=None, name=None, registered_at=None, votes=None, blocks_forged=None, turns_hit=None, turns_missed=None, validator=None):  # noqa: E501
        """DelegateType - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._name = None
        self._registered_at = None
        self._votes = None
        self._blocks_forged = None
        self._turns_hit = None
        self._turns_missed = None
        self._validator = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if name is not None:
            self.name = name
        if registered_at is not None:
            self.registered_at = registered_at
        if votes is not None:
            self.votes = votes
        if blocks_forged is not None:
            self.blocks_forged = blocks_forged
        if turns_hit is not None:
            self.turns_hit = turns_hit
        if turns_missed is not None:
            self.turns_missed = turns_missed
        if validator is not None:
            self.validator = validator

    @property
    def address(self):
        """Gets the address of this DelegateType.  # noqa: E501

        Delegate SEM address  # noqa: E501

        :return: The address of this DelegateType.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DelegateType.

        Delegate SEM address  # noqa: E501

        :param address: The address of this DelegateType.  # noqa: E501
        :type: str
        """
        if address is not None and not re.search('^(0x)?[0-9a-fA-F]{40}$', address):  # noqa: E501
            raise ValueError("Invalid value for `address`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501

        self._address = address

    @property
    def name(self):
        """Gets the name of this DelegateType.  # noqa: E501

        Delegate name  # noqa: E501

        :return: The name of this DelegateType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DelegateType.

        Delegate name  # noqa: E501

        :param name: The name of this DelegateType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def registered_at(self):
        """Gets the registered_at of this DelegateType.  # noqa: E501

        Delegate registration block number  # noqa: E501

        :return: The registered_at of this DelegateType.  # noqa: E501
        :rtype: str
        """
        return self._registered_at

    @registered_at.setter
    def registered_at(self, registered_at):
        """Sets the registered_at of this DelegateType.

        Delegate registration block number  # noqa: E501

        :param registered_at: The registered_at of this DelegateType.  # noqa: E501
        :type: str
        """
        if registered_at is not None and not re.search('^\\d+$', registered_at):  # noqa: E501
            raise ValueError("Invalid value for `registered_at`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._registered_at = registered_at

    @property
    def votes(self):
        """Gets the votes of this DelegateType.  # noqa: E501

        Total votes of the delegate  # noqa: E501

        :return: The votes of this DelegateType.  # noqa: E501
        :rtype: str
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this DelegateType.

        Total votes of the delegate  # noqa: E501

        :param votes: The votes of this DelegateType.  # noqa: E501
        :type: str
        """
        if votes is not None and not re.search('^\\d+$', votes):  # noqa: E501
            raise ValueError("Invalid value for `votes`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._votes = votes

    @property
    def blocks_forged(self):
        """Gets the blocks_forged of this DelegateType.  # noqa: E501

        Total forged blocks including primary rounds & backup rounds  # noqa: E501

        :return: The blocks_forged of this DelegateType.  # noqa: E501
        :rtype: str
        """
        return self._blocks_forged

    @blocks_forged.setter
    def blocks_forged(self, blocks_forged):
        """Sets the blocks_forged of this DelegateType.

        Total forged blocks including primary rounds & backup rounds  # noqa: E501

        :param blocks_forged: The blocks_forged of this DelegateType.  # noqa: E501
        :type: str
        """
        if blocks_forged is not None and not re.search('^\\d+$', blocks_forged):  # noqa: E501
            raise ValueError("Invalid value for `blocks_forged`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._blocks_forged = blocks_forged

    @property
    def turns_hit(self):
        """Gets the turns_hit of this DelegateType.  # noqa: E501

        Forged blocks when the delegate is a primary validator  # noqa: E501

        :return: The turns_hit of this DelegateType.  # noqa: E501
        :rtype: str
        """
        return self._turns_hit

    @turns_hit.setter
    def turns_hit(self, turns_hit):
        """Sets the turns_hit of this DelegateType.

        Forged blocks when the delegate is a primary validator  # noqa: E501

        :param turns_hit: The turns_hit of this DelegateType.  # noqa: E501
        :type: str
        """
        if turns_hit is not None and not re.search('^\\d+$', turns_hit):  # noqa: E501
            raise ValueError("Invalid value for `turns_hit`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._turns_hit = turns_hit

    @property
    def turns_missed(self):
        """Gets the turns_missed of this DelegateType.  # noqa: E501

        Missed blocks when the delegate is a primary validator  # noqa: E501

        :return: The turns_missed of this DelegateType.  # noqa: E501
        :rtype: str
        """
        return self._turns_missed

    @turns_missed.setter
    def turns_missed(self, turns_missed):
        """Sets the turns_missed of this DelegateType.

        Missed blocks when the delegate is a primary validator  # noqa: E501

        :param turns_missed: The turns_missed of this DelegateType.  # noqa: E501
        :type: str
        """
        if turns_missed is not None and not re.search('^\\d+$', turns_missed):  # noqa: E501
            raise ValueError("Invalid value for `turns_missed`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._turns_missed = turns_missed

    @property
    def validator(self):
        """Gets the validator of this DelegateType.  # noqa: E501

        Whether the delegate is currently a validator  # noqa: E501

        :return: The validator of this DelegateType.  # noqa: E501
        :rtype: bool
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this DelegateType.

        Whether the delegate is currently a validator  # noqa: E501

        :param validator: The validator of this DelegateType.  # noqa: E501
        :type: bool
        """

        self._validator = validator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DelegateType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
