# coding: utf-8

"""
    Semux API

    Semux is an experimental high-performance blockchain platform that powers decentralized application.  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.transaction_type import TransactionType  # noqa: F401,E501


class BlockType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'number': 'str',
        'view': 'int',
        'coinbase': 'str',
        'parent_hash': 'str',
        'timestamp': 'str',
        'transactions_root': 'str',
        'results_root': 'str',
        'state_root': 'str',
        'data': 'str',
        'transactions': 'list[TransactionType]'
    }

    attribute_map = {
        'hash': 'hash',
        'number': 'number',
        'view': 'view',
        'coinbase': 'coinbase',
        'parent_hash': 'parentHash',
        'timestamp': 'timestamp',
        'transactions_root': 'transactionsRoot',
        'results_root': 'resultsRoot',
        'state_root': 'stateRoot',
        'data': 'data',
        'transactions': 'transactions'
    }

    def __init__(self, hash=None, number=None, view=None, coinbase=None, parent_hash=None, timestamp=None, transactions_root=None, results_root=None, state_root=None, data=None, transactions=None):  # noqa: E501
        """BlockType - a model defined in Swagger"""  # noqa: E501

        self._hash = None
        self._number = None
        self._view = None
        self._coinbase = None
        self._parent_hash = None
        self._timestamp = None
        self._transactions_root = None
        self._results_root = None
        self._state_root = None
        self._data = None
        self._transactions = None
        self.discriminator = None

        if hash is not None:
            self.hash = hash
        if number is not None:
            self.number = number
        if view is not None:
            self.view = view
        if coinbase is not None:
            self.coinbase = coinbase
        if parent_hash is not None:
            self.parent_hash = parent_hash
        if timestamp is not None:
            self.timestamp = timestamp
        if transactions_root is not None:
            self.transactions_root = transactions_root
        if results_root is not None:
            self.results_root = results_root
        if state_root is not None:
            self.state_root = state_root
        if data is not None:
            self.data = data
        if transactions is not None:
            self.transactions = transactions

    @property
    def hash(self):
        """Gets the hash of this BlockType.  # noqa: E501


        :return: The hash of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this BlockType.


        :param hash: The hash of this BlockType.  # noqa: E501
        :type: str
        """
        if hash is not None and not re.search('^(0x)?[0-9a-fA-F]{64}$', hash):  # noqa: E501
            raise ValueError("Invalid value for `hash`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501

        self._hash = hash

    @property
    def number(self):
        """Gets the number of this BlockType.  # noqa: E501


        :return: The number of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this BlockType.


        :param number: The number of this BlockType.  # noqa: E501
        :type: str
        """
        if number is not None and not re.search('^\\d+$', number):  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._number = number

    @property
    def view(self):
        """Gets the view of this BlockType.  # noqa: E501


        :return: The view of this BlockType.  # noqa: E501
        :rtype: int
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this BlockType.


        :param view: The view of this BlockType.  # noqa: E501
        :type: int
        """

        self._view = view

    @property
    def coinbase(self):
        """Gets the coinbase of this BlockType.  # noqa: E501


        :return: The coinbase of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._coinbase

    @coinbase.setter
    def coinbase(self, coinbase):
        """Sets the coinbase of this BlockType.


        :param coinbase: The coinbase of this BlockType.  # noqa: E501
        :type: str
        """
        if coinbase is not None and not re.search('^(0x)?[0-9a-fA-F]{40}$', coinbase):  # noqa: E501
            raise ValueError("Invalid value for `coinbase`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501

        self._coinbase = coinbase

    @property
    def parent_hash(self):
        """Gets the parent_hash of this BlockType.  # noqa: E501


        :return: The parent_hash of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._parent_hash

    @parent_hash.setter
    def parent_hash(self, parent_hash):
        """Sets the parent_hash of this BlockType.


        :param parent_hash: The parent_hash of this BlockType.  # noqa: E501
        :type: str
        """
        if parent_hash is not None and not re.search('^(0x)?[0-9a-fA-F]{64}$', parent_hash):  # noqa: E501
            raise ValueError("Invalid value for `parent_hash`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501

        self._parent_hash = parent_hash

    @property
    def timestamp(self):
        """Gets the timestamp of this BlockType.  # noqa: E501

        Block timestamp in milliseconds specified by the block forger. There can be a time drift up to 30 seconds.  # noqa: E501

        :return: The timestamp of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BlockType.

        Block timestamp in milliseconds specified by the block forger. There can be a time drift up to 30 seconds.  # noqa: E501

        :param timestamp: The timestamp of this BlockType.  # noqa: E501
        :type: str
        """
        if timestamp is not None and not re.search('^\\d+$', timestamp):  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def transactions_root(self):
        """Gets the transactions_root of this BlockType.  # noqa: E501


        :return: The transactions_root of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._transactions_root

    @transactions_root.setter
    def transactions_root(self, transactions_root):
        """Sets the transactions_root of this BlockType.


        :param transactions_root: The transactions_root of this BlockType.  # noqa: E501
        :type: str
        """
        if transactions_root is not None and not re.search('^(0x)?[0-9a-fA-F]{64}$', transactions_root):  # noqa: E501
            raise ValueError("Invalid value for `transactions_root`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501

        self._transactions_root = transactions_root

    @property
    def results_root(self):
        """Gets the results_root of this BlockType.  # noqa: E501


        :return: The results_root of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._results_root

    @results_root.setter
    def results_root(self, results_root):
        """Sets the results_root of this BlockType.


        :param results_root: The results_root of this BlockType.  # noqa: E501
        :type: str
        """
        if results_root is not None and not re.search('^(0x)?[0-9a-fA-F]{64}$', results_root):  # noqa: E501
            raise ValueError("Invalid value for `results_root`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501

        self._results_root = results_root

    @property
    def state_root(self):
        """Gets the state_root of this BlockType.  # noqa: E501


        :return: The state_root of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._state_root

    @state_root.setter
    def state_root(self, state_root):
        """Sets the state_root of this BlockType.


        :param state_root: The state_root of this BlockType.  # noqa: E501
        :type: str
        """
        if state_root is not None and not re.search('^(0x)?[0-9a-fA-F]{64}$', state_root):  # noqa: E501
            raise ValueError("Invalid value for `state_root`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501

        self._state_root = state_root

    @property
    def data(self):
        """Gets the data of this BlockType.  # noqa: E501


        :return: The data of this BlockType.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BlockType.


        :param data: The data of this BlockType.  # noqa: E501
        :type: str
        """
        if data is not None and not re.search('^(0x)?[0-9a-fA-F]*$', data):  # noqa: E501
            raise ValueError("Invalid value for `data`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]*$/`")  # noqa: E501

        self._data = data

    @property
    def transactions(self):
        """Gets the transactions of this BlockType.  # noqa: E501


        :return: The transactions of this BlockType.  # noqa: E501
        :rtype: list[TransactionType]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this BlockType.


        :param transactions: The transactions of this BlockType.  # noqa: E501
        :type: list[TransactionType]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
