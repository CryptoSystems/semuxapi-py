# coding: utf-8

"""
    Semux API

    Semux is an experimental high-performance blockchain platform that powers decentralized application.  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PendingTransactionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'type': 'str',
        '_from': 'str',
        'to': 'str',
        'value': 'str',
        'fee': 'str',
        'nonce': 'str',
        'timestamp': 'str',
        'data': 'str'
    }

    attribute_map = {
        'hash': 'hash',
        'type': 'type',
        '_from': 'from',
        'to': 'to',
        'value': 'value',
        'fee': 'fee',
        'nonce': 'nonce',
        'timestamp': 'timestamp',
        'data': 'data'
    }

    def __init__(self, hash=None, type=None, _from=None, to=None, value=None, fee=None, nonce=None, timestamp=None, data=None):  # noqa: E501
        """PendingTransactionType - a model defined in Swagger"""  # noqa: E501

        self._hash = None
        self._type = None
        self.__from = None
        self._to = None
        self._value = None
        self._fee = None
        self._nonce = None
        self._timestamp = None
        self._data = None
        self.discriminator = None

        if hash is not None:
            self.hash = hash
        if type is not None:
            self.type = type
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if value is not None:
            self.value = value
        if fee is not None:
            self.fee = fee
        if nonce is not None:
            self.nonce = nonce
        if timestamp is not None:
            self.timestamp = timestamp
        if data is not None:
            self.data = data

    @property
    def hash(self):
        """Gets the hash of this PendingTransactionType.  # noqa: E501


        :return: The hash of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this PendingTransactionType.


        :param hash: The hash of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        if hash is not None and not re.search('^(0x)?[0-9a-fA-F]{64}$', hash):  # noqa: E501
            raise ValueError("Invalid value for `hash`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501

        self._hash = hash

    @property
    def type(self):
        """Gets the type of this PendingTransactionType.  # noqa: E501


        :return: The type of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PendingTransactionType.


        :param type: The type of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        allowed_values = ["COINBASE", "TRANSFER", "DELEGATE", "VOTE", "UNVOTE", "CREATE", "CALL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def _from(self):
        """Gets the _from of this PendingTransactionType.  # noqa: E501

        Sender's address  # noqa: E501

        :return: The _from of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this PendingTransactionType.

        Sender's address  # noqa: E501

        :param _from: The _from of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        if _from is not None and not re.search('^(0x)?[0-9a-fA-F]{40}$', _from):  # noqa: E501
            raise ValueError("Invalid value for `_from`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this PendingTransactionType.  # noqa: E501

        Recipient's address  # noqa: E501

        :return: The to of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PendingTransactionType.

        Recipient's address  # noqa: E501

        :param to: The to of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        if to is not None and not re.search('^(0x)?[0-9a-fA-F]{40}$', to):  # noqa: E501
            raise ValueError("Invalid value for `to`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501

        self._to = to

    @property
    def value(self):
        """Gets the value of this PendingTransactionType.  # noqa: E501

        Transaction value in nano SEM  # noqa: E501

        :return: The value of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PendingTransactionType.

        Transaction value in nano SEM  # noqa: E501

        :param value: The value of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        if value is not None and not re.search('^\\d+$', value):  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._value = value

    @property
    def fee(self):
        """Gets the fee of this PendingTransactionType.  # noqa: E501

        Transaction fee in nano SEM  # noqa: E501

        :return: The fee of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this PendingTransactionType.

        Transaction fee in nano SEM  # noqa: E501

        :param fee: The fee of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        if fee is not None and not re.search('^\\d+$', fee):  # noqa: E501
            raise ValueError("Invalid value for `fee`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._fee = fee

    @property
    def nonce(self):
        """Gets the nonce of this PendingTransactionType.  # noqa: E501


        :return: The nonce of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this PendingTransactionType.


        :param nonce: The nonce of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        if nonce is not None and not re.search('^\\d+$', nonce):  # noqa: E501
            raise ValueError("Invalid value for `nonce`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._nonce = nonce

    @property
    def timestamp(self):
        """Gets the timestamp of this PendingTransactionType.  # noqa: E501

        Transaction timestamp in milliseconds specified by the transaction creator. There can be a time drift up to 2 hours.  # noqa: E501

        :return: The timestamp of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PendingTransactionType.

        Transaction timestamp in milliseconds specified by the transaction creator. There can be a time drift up to 2 hours.  # noqa: E501

        :param timestamp: The timestamp of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        if timestamp is not None and not re.search('^\\d+$', timestamp):  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def data(self):
        """Gets the data of this PendingTransactionType.  # noqa: E501

        Transaction data encoded in hexadecimal string  # noqa: E501

        :return: The data of this PendingTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PendingTransactionType.

        Transaction data encoded in hexadecimal string  # noqa: E501

        :param data: The data of this PendingTransactionType.  # noqa: E501
        :type: str
        """
        if data is not None and not re.search('^(0x)?[0-9a-fA-F]*$', data):  # noqa: E501
            raise ValueError("Invalid value for `data`, must be a follow pattern or equal to `/^(0x)?[0-9a-fA-F]*$/`")  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PendingTransactionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
