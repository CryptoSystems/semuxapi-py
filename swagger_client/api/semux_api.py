# coding: utf-8

"""
    Semux API

    Semux is an experimental high-performance blockchain platform that powers decentralized application.  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SemuxApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_node(self, node, **kwargs):  # noqa: E501
        """Add node  # noqa: E501

        Adds a node to node manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_node(node, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node: Address of the node in host:port format (required)
        :return: AddNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_node_with_http_info(node, **kwargs)  # noqa: E501
        else:
            (data) = self.add_node_with_http_info(node, **kwargs)  # noqa: E501
            return data

    def add_node_with_http_info(self, node, **kwargs):  # noqa: E501
        """Add node  # noqa: E501

        Adds a node to node manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_node_with_http_info(node, async=True)
        >>> result = thread.get()

        :param async bool
        :param str node: Address of the node in host:port format (required)
        :return: AddNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `add_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'node' in params:
            query_params.append(('node', params['node']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_to_blacklist(self, ip, **kwargs):  # noqa: E501
        """Add to blacklist  # noqa: E501

        Adds an IP address to blacklist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_to_blacklist(ip, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip: IP address (required)
        :return: ApiHandlerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_to_blacklist_with_http_info(ip, **kwargs)  # noqa: E501
        else:
            (data) = self.add_to_blacklist_with_http_info(ip, **kwargs)  # noqa: E501
            return data

    def add_to_blacklist_with_http_info(self, ip, **kwargs):  # noqa: E501
        """Add to blacklist  # noqa: E501

        Adds an IP address to blacklist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_to_blacklist_with_http_info(ip, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip: IP address (required)
        :return: ApiHandlerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_to_blacklist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ip' is set
        if ('ip' not in params or
                params['ip'] is None):
            raise ValueError("Missing the required parameter `ip` when calling `add_to_blacklist`")  # noqa: E501

        if 'ip' in params and not re.search('^(\\d{1,3}\\.){3}\\d{1,3}$', params['ip']):  # noqa: E501
            raise ValueError("Invalid value for parameter `ip` when calling `add_to_blacklist`, must conform to the pattern `/^(\\d{1,3}\\.){3}\\d{1,3}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/blacklist', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiHandlerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_to_whitelist(self, ip, **kwargs):  # noqa: E501
        """Add to whitelist  # noqa: E501

        Adds an IP address to whitelist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_to_whitelist(ip, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip: IP address (required)
        :return: ApiHandlerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_to_whitelist_with_http_info(ip, **kwargs)  # noqa: E501
        else:
            (data) = self.add_to_whitelist_with_http_info(ip, **kwargs)  # noqa: E501
            return data

    def add_to_whitelist_with_http_info(self, ip, **kwargs):  # noqa: E501
        """Add to whitelist  # noqa: E501

        Adds an IP address to whitelist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_to_whitelist_with_http_info(ip, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip: IP address (required)
        :return: ApiHandlerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_to_whitelist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ip' is set
        if ('ip' not in params or
                params['ip'] is None):
            raise ValueError("Missing the required parameter `ip` when calling `add_to_whitelist`")  # noqa: E501

        if 'ip' in params and not re.search('^(\\d{1,3}\\.){3}\\d{1,3}$', params['ip']):  # noqa: E501
            raise ValueError("Invalid value for parameter `ip` when calling `add_to_whitelist`, must conform to the pattern `/^(\\d{1,3}\\.){3}\\d{1,3}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/whitelist', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiHandlerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def broadcast_raw_transaction(self, raw, **kwargs):  # noqa: E501
        """Broadcast a raw transaction  # noqa: E501

        Broadcasts a raw transaction to the network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.broadcast_raw_transaction(raw, async=True)
        >>> result = thread.get()

        :param async bool
        :param str raw: Raw transaction encoded in hexadecimal string. (required)
        :param bool validate_nonce: Whether to validate tx nonce against the current account state, default to false if omitted
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.broadcast_raw_transaction_with_http_info(raw, **kwargs)  # noqa: E501
        else:
            (data) = self.broadcast_raw_transaction_with_http_info(raw, **kwargs)  # noqa: E501
            return data

    def broadcast_raw_transaction_with_http_info(self, raw, **kwargs):  # noqa: E501
        """Broadcast a raw transaction  # noqa: E501

        Broadcasts a raw transaction to the network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.broadcast_raw_transaction_with_http_info(raw, async=True)
        >>> result = thread.get()

        :param async bool
        :param str raw: Raw transaction encoded in hexadecimal string. (required)
        :param bool validate_nonce: Whether to validate tx nonce against the current account state, default to false if omitted
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['raw', 'validate_nonce']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method broadcast_raw_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'raw' is set
        if ('raw' not in params or
                params['raw'] is None):
            raise ValueError("Missing the required parameter `raw` when calling `broadcast_raw_transaction`")  # noqa: E501

        if 'raw' in params and not re.search('^(0x)?[0-9a-fA-F]+$', params['raw']):  # noqa: E501
            raise ValueError("Invalid value for parameter `raw` when calling `broadcast_raw_transaction`, must conform to the pattern `/^(0x)?[0-9a-fA-F]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'raw' in params:
            query_params.append(('raw', params['raw']))  # noqa: E501
        if 'validate_nonce' in params:
            query_params.append(('validateNonce', params['validate_nonce']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction/raw', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DoTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compose_raw_transaction(self, network, type, fee, nonce, **kwargs):  # noqa: E501
        """Compose an unsigned raw transaction  # noqa: E501

        Compose an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be signed using /sign-raw-transaction API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.compose_raw_transaction(network, type, fee, nonce, async=True)
        >>> result = thread.get()

        :param async bool
        :param str network: Network name (required)
        :param str type: Transaction type (required)
        :param str fee: Transaction fee in nano (required)
        :param str nonce: Transaction nonce (required)
        :param str to: Recipient's address
        :param str value: Transaction value in nano SEM
        :param str timestamp: Transaction timestamp in milliseconds. Default to current time.
        :param str data: Hexadecimal encoded transaction data.
        :return: ComposeRawTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.compose_raw_transaction_with_http_info(network, type, fee, nonce, **kwargs)  # noqa: E501
        else:
            (data) = self.compose_raw_transaction_with_http_info(network, type, fee, nonce, **kwargs)  # noqa: E501
            return data

    def compose_raw_transaction_with_http_info(self, network, type, fee, nonce, **kwargs):  # noqa: E501
        """Compose an unsigned raw transaction  # noqa: E501

        Compose an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be signed using /sign-raw-transaction API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.compose_raw_transaction_with_http_info(network, type, fee, nonce, async=True)
        >>> result = thread.get()

        :param async bool
        :param str network: Network name (required)
        :param str type: Transaction type (required)
        :param str fee: Transaction fee in nano (required)
        :param str nonce: Transaction nonce (required)
        :param str to: Recipient's address
        :param str value: Transaction value in nano SEM
        :param str timestamp: Transaction timestamp in milliseconds. Default to current time.
        :param str data: Hexadecimal encoded transaction data.
        :return: ComposeRawTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network', 'type', 'fee', 'nonce', 'to', 'value', 'timestamp', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compose_raw_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network' is set
        if ('network' not in params or
                params['network'] is None):
            raise ValueError("Missing the required parameter `network` when calling `compose_raw_transaction`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `compose_raw_transaction`")  # noqa: E501
        # verify the required parameter 'fee' is set
        if ('fee' not in params or
                params['fee'] is None):
            raise ValueError("Missing the required parameter `fee` when calling `compose_raw_transaction`")  # noqa: E501
        # verify the required parameter 'nonce' is set
        if ('nonce' not in params or
                params['nonce'] is None):
            raise ValueError("Missing the required parameter `nonce` when calling `compose_raw_transaction`")  # noqa: E501

        if 'fee' in params and not re.search('^\\d+$', params['fee']):  # noqa: E501
            raise ValueError("Invalid value for parameter `fee` when calling `compose_raw_transaction`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'nonce' in params and not re.search('^\\d+$', params['nonce']):  # noqa: E501
            raise ValueError("Invalid value for parameter `nonce` when calling `compose_raw_transaction`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'to' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['to']):  # noqa: E501
            raise ValueError("Invalid value for parameter `to` when calling `compose_raw_transaction`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'value' in params and not re.search('^\\d+$', params['value']):  # noqa: E501
            raise ValueError("Invalid value for parameter `value` when calling `compose_raw_transaction`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'timestamp' in params and not re.search('^\\d+$', params['timestamp']):  # noqa: E501
            raise ValueError("Invalid value for parameter `timestamp` when calling `compose_raw_transaction`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'data' in params and not re.search('^(0x)?[0-9a-fA-F]+$', params['data']):  # noqa: E501
            raise ValueError("Invalid value for parameter `data` when calling `compose_raw_transaction`, must conform to the pattern `/^(0x)?[0-9a-fA-F]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'network' in params:
            query_params.append(('network', params['network']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'fee' in params:
            query_params.append(('fee', params['fee']))  # noqa: E501
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'data' in params:
            query_params.append(('data', params['data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/compose-raw-transaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComposeRawTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account(self, **kwargs):  # noqa: E501
        """Create or import an account  # noqa: E501

        Creates a new account by generating a new private key or importing an existing private key when parameter 'privateKey' is provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Assigned alias to the created account.
        :param str private_key: The private key to be imported, create a new key if omitted
        :return: CreateAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_account_with_http_info(self, **kwargs):  # noqa: E501
        """Create or import an account  # noqa: E501

        Creates a new account by generating a new private key or importing an existing private key when parameter 'privateKey' is provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Assigned alias to the created account.
        :param str private_key: The private key to be imported, create a new key if omitted
        :return: CreateAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'private_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account" % key
                )
            params[key] = val
        del params['kwargs']

        if 'private_key' in params and not re.search('^(0x)?[0-9a-fA-F]{96}$', params['private_key']):  # noqa: E501
            raise ValueError("Invalid value for parameter `private_key` when calling `create_account`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{96}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'private_key' in params:
            query_params.append(('privateKey', params['private_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/account', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_account(self, address, **kwargs):  # noqa: E501
        """Delete account  # noqa: E501

        Deletes an account from this wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_account(address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of the account (required)
        :return: DeleteAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_account_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_account_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def delete_account_with_http_info(self, address, **kwargs):  # noqa: E501
        """Delete account  # noqa: E501

        Deletes an account from this wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_account_with_http_info(address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of the account (required)
        :return: DeleteAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `delete_account`")  # noqa: E501

        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `delete_account`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/account', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account(self, address, **kwargs):  # noqa: E501
        """Get account  # noqa: E501

        Returns an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account(address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of account (required)
        :return: GetAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_account_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get account  # noqa: E501

        Returns an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_with_http_info(address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of account (required)
        :return: GetAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_account`")  # noqa: E501

        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `get_account`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_pending_transactions(self, address, _from, to, **kwargs):  # noqa: E501
        """Get pending transactions of the account  # noqa: E501

        Returns pending transactions from/to an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_pending_transactions(address, _from, to, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of account (required)
        :param str _from: Starting range of transactions (required)
        :param str to: Ending range of transactions (required)
        :return: GetAccountPendingTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_pending_transactions_with_http_info(address, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_pending_transactions_with_http_info(address, _from, to, **kwargs)  # noqa: E501
            return data

    def get_account_pending_transactions_with_http_info(self, address, _from, to, **kwargs):  # noqa: E501
        """Get pending transactions of the account  # noqa: E501

        Returns pending transactions from/to an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_pending_transactions_with_http_info(address, _from, to, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of account (required)
        :param str _from: Starting range of transactions (required)
        :param str to: Ending range of transactions (required)
        :return: GetAccountPendingTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', '_from', 'to']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_pending_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_account_pending_transactions`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_account_pending_transactions`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_account_pending_transactions`")  # noqa: E501

        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `get_account_pending_transactions`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if '_from' in params and not re.search('^\\d+$', params['_from']):  # noqa: E501
            raise ValueError("Invalid value for parameter `_from` when calling `get_account_pending_transactions`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'to' in params and not re.search('^\\d+$', params['to']):  # noqa: E501
            raise ValueError("Invalid value for parameter `to` when calling `get_account_pending_transactions`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/account/pending-transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountPendingTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_transactions(self, address, _from, to, **kwargs):  # noqa: E501
        """Get account transactions  # noqa: E501

        Returns transactions from/to an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_transactions(address, _from, to, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of account (required)
        :param str _from: Starting range of transactions (required)
        :param str to: Ending range of transactions (required)
        :return: GetAccountTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_transactions_with_http_info(address, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_transactions_with_http_info(address, _from, to, **kwargs)  # noqa: E501
            return data

    def get_account_transactions_with_http_info(self, address, _from, to, **kwargs):  # noqa: E501
        """Get account transactions  # noqa: E501

        Returns transactions from/to an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_transactions_with_http_info(address, _from, to, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of account (required)
        :param str _from: Starting range of transactions (required)
        :param str to: Ending range of transactions (required)
        :return: GetAccountTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', '_from', 'to']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_account_transactions`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_account_transactions`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_account_transactions`")  # noqa: E501

        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `get_account_transactions`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if '_from' in params and not re.search('^\\d+$', params['_from']):  # noqa: E501
            raise ValueError("Invalid value for parameter `_from` when calling `get_account_transactions`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'to' in params and not re.search('^\\d+$', params['to']):  # noqa: E501
            raise ValueError("Invalid value for parameter `to` when calling `get_account_transactions`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/account/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_votes(self, address, **kwargs):  # noqa: E501
        """Get account votes  # noqa: E501

        Returns votes from the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_votes(address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of account (required)
        :return: GetAccountVotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_votes_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_votes_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_account_votes_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get account votes  # noqa: E501

        Returns votes from the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_votes_with_http_info(address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of account (required)
        :return: GetAccountVotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_votes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_account_votes`")  # noqa: E501

        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `get_account_votes`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/account/votes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountVotesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_by_hash(self, hash, **kwargs):  # noqa: E501
        """Get block by hash  # noqa: E501

        Returns a block by block hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_by_hash(hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Hash of block (required)
        :return: GetBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_by_hash_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_by_hash_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def get_block_by_hash_with_http_info(self, hash, **kwargs):  # noqa: E501
        """Get block by hash  # noqa: E501

        Returns a block by block hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_by_hash_with_http_info(hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Hash of block (required)
        :return: GetBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_by_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_block_by_hash`")  # noqa: E501

        if 'hash' in params and not re.search('^(0x)?[0-9a-fA-F]{64}$', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `get_block_by_hash`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/block-by-hash', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_by_number(self, number, **kwargs):  # noqa: E501
        """Get block by number  # noqa: E501

        Returns a block by block number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_by_number(number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str number: Number of block (required)
        :return: GetBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_by_number_with_http_info(number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_by_number_with_http_info(number, **kwargs)  # noqa: E501
            return data

    def get_block_by_number_with_http_info(self, number, **kwargs):  # noqa: E501
        """Get block by number  # noqa: E501

        Returns a block by block number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_by_number_with_http_info(number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str number: Number of block (required)
        :return: GetBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_by_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number' is set
        if ('number' not in params or
                params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `get_block_by_number`")  # noqa: E501

        if 'number' in params and not re.search('^\\d+$', params['number']):  # noqa: E501
            raise ValueError("Invalid value for parameter `number` when calling `get_block_by_number`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'number' in params:
            query_params.append(('number', params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/block-by-number', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_delegate(self, address, **kwargs):  # noqa: E501
        """Get a delegate  # noqa: E501

        Returns a delegate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_delegate(address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Delegate address (required)
        :return: GetDelegateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_delegate_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_delegate_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def get_delegate_with_http_info(self, address, **kwargs):  # noqa: E501
        """Get a delegate  # noqa: E501

        Returns a delegate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_delegate_with_http_info(address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Delegate address (required)
        :return: GetDelegateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_delegate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `get_delegate`")  # noqa: E501

        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `get_delegate`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/delegate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDelegateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_delegates(self, **kwargs):  # noqa: E501
        """Get all delegates  # noqa: E501

        Returns a list of delegates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_delegates(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetDelegatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_delegates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_delegates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_delegates_with_http_info(self, **kwargs):  # noqa: E501
        """Get all delegates  # noqa: E501

        Returns a list of delegates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_delegates_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetDelegatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_delegates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/delegates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDelegatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_info(self, **kwargs):  # noqa: E501
        """Get info  # noqa: E501

        Returns kernel info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get info  # noqa: E501

        Returns kernel info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_info_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_block(self, **kwargs):  # noqa: E501
        """Get latest block  # noqa: E501

        Returns the latest block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_latest_block(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetLatestBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_latest_block_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_latest_block_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_latest_block_with_http_info(self, **kwargs):  # noqa: E501
        """Get latest block  # noqa: E501

        Returns the latest block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_latest_block_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetLatestBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_block" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/latest-block', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLatestBlockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_block_number(self, **kwargs):  # noqa: E501
        """Get latest block number  # noqa: E501

        Returns the number of the latest block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_latest_block_number(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetLatestBlockNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_latest_block_number_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_latest_block_number_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_latest_block_number_with_http_info(self, **kwargs):  # noqa: E501
        """Get latest block number  # noqa: E501

        Returns the number of the latest block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_latest_block_number_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetLatestBlockNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_block_number" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/latest-block-number', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLatestBlockNumberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_peers(self, **kwargs):  # noqa: E501
        """Get peers  # noqa: E501

        Returns connected peers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_peers(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetPeersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_peers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_peers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_peers_with_http_info(self, **kwargs):  # noqa: E501
        """Get peers  # noqa: E501

        Returns connected peers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_peers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetPeersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_peers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/peers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPeersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pending_transactions(self, **kwargs):  # noqa: E501
        """Get pending transactions  # noqa: E501

        Returns all the pending transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pending_transactions(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetPendingTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_pending_transactions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pending_transactions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pending_transactions_with_http_info(self, **kwargs):  # noqa: E501
        """Get pending transactions  # noqa: E501

        Returns all the pending transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pending_transactions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetPendingTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pending_transactions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pending-transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPendingTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_root(self, **kwargs):  # noqa: E501
        """Get root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_root(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetRootResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_root_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_root_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_root_with_http_info(self, **kwargs):  # noqa: E501
        """Get root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_root_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetRootResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_root" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRootResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_syncing_progress(self, **kwargs):  # noqa: E501
        """Get syncing progress  # noqa: E501

        Returns an object with data about the sync status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_syncing_progress(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetSyncingProgressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_syncing_progress_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_syncing_progress_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_syncing_progress_with_http_info(self, **kwargs):  # noqa: E501
        """Get syncing progress  # noqa: E501

        Returns an object with data about the sync status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_syncing_progress_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetSyncingProgressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_syncing_progress" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/syncing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSyncingProgressResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction(self, hash, **kwargs):  # noqa: E501
        """Get transaction  # noqa: E501

        Returns a transactions if exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction(hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Transaction hash (required)
        :return: GetTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def get_transaction_with_http_info(self, hash, **kwargs):  # noqa: E501
        """Get transaction  # noqa: E501

        Returns a transactions if exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_with_http_info(hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Transaction hash (required)
        :return: GetTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_transaction`")  # noqa: E501

        if 'hash' in params and not re.search('^(0x)?[0-9a-fA-F]{64}$', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `get_transaction`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{64}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_limits(self, type, **kwargs):  # noqa: E501
        """Get transaction limits  # noqa: E501

        Returns transaction limitations including minimum transaction fee and maximum transaction size.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_limits(type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str type: Type of transaction (required)
        :return: GetTransactionLimitsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_limits_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_limits_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def get_transaction_limits_with_http_info(self, type, **kwargs):  # noqa: E501
        """Get transaction limits  # noqa: E501

        Returns transaction limitations including minimum transaction fee and maximum transaction size.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_limits_with_http_info(type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str type: Type of transaction (required)
        :return: GetTransactionLimitsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_transaction_limits`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction-limits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTransactionLimitsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_validators(self, **kwargs):  # noqa: E501
        """Get validators  # noqa: E501

        Returns a list of validators in Semux addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_validators(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetValidatorsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_validators_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_validators_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_validators_with_http_info(self, **kwargs):  # noqa: E501
        """Get validators  # noqa: E501

        Returns a list of validators in Semux addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_validators_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetValidatorsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_validators" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/validators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetValidatorsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vote(self, delegate, voter, **kwargs):  # noqa: E501
        """Get vote  # noqa: E501

        Returns the vote from a voter to a delegate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vote(delegate, voter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str delegate: Delegate address (required)
        :param str voter: Voter address (required)
        :return: GetVoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_vote_with_http_info(delegate, voter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vote_with_http_info(delegate, voter, **kwargs)  # noqa: E501
            return data

    def get_vote_with_http_info(self, delegate, voter, **kwargs):  # noqa: E501
        """Get vote  # noqa: E501

        Returns the vote from a voter to a delegate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vote_with_http_info(delegate, voter, async=True)
        >>> result = thread.get()

        :param async bool
        :param str delegate: Delegate address (required)
        :param str voter: Voter address (required)
        :return: GetVoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegate', 'voter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegate' is set
        if ('delegate' not in params or
                params['delegate'] is None):
            raise ValueError("Missing the required parameter `delegate` when calling `get_vote`")  # noqa: E501
        # verify the required parameter 'voter' is set
        if ('voter' not in params or
                params['voter'] is None):
            raise ValueError("Missing the required parameter `voter` when calling `get_vote`")  # noqa: E501

        if 'delegate' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['delegate']):  # noqa: E501
            raise ValueError("Invalid value for parameter `delegate` when calling `get_vote`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'voter' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['voter']):  # noqa: E501
            raise ValueError("Invalid value for parameter `voter` when calling `get_vote`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delegate' in params:
            query_params.append(('delegate', params['delegate']))  # noqa: E501
        if 'voter' in params:
            query_params.append(('voter', params['voter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVoteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_votes(self, delegate, **kwargs):  # noqa: E501
        """Get a delegate&#39;s votes  # noqa: E501

        Returns all the votes to a delegate as a map of [voter address] => [votes]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_votes(delegate, async=True)
        >>> result = thread.get()

        :param async bool
        :param str delegate: Delegate address (required)
        :return: GetVotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_votes_with_http_info(delegate, **kwargs)  # noqa: E501
        else:
            (data) = self.get_votes_with_http_info(delegate, **kwargs)  # noqa: E501
            return data

    def get_votes_with_http_info(self, delegate, **kwargs):  # noqa: E501
        """Get a delegate&#39;s votes  # noqa: E501

        Returns all the votes to a delegate as a map of [voter address] => [votes]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_votes_with_http_info(delegate, async=True)
        >>> result = thread.get()

        :param async bool
        :param str delegate: Delegate address (required)
        :return: GetVotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegate']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_votes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegate' is set
        if ('delegate' not in params or
                params['delegate'] is None):
            raise ValueError("Missing the required parameter `delegate` when calling `get_votes`")  # noqa: E501

        if 'delegate' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['delegate']):  # noqa: E501
            raise ValueError("Invalid value for parameter `delegate` when calling `get_votes`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delegate' in params:
            query_params.append(('delegate', params['delegate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/votes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVotesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_accounts(self, **kwargs):  # noqa: E501
        """List accounts  # noqa: E501

        Returns accounts in the wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_accounts(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ListAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """List accounts  # noqa: E501

        Returns accounts in the wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_accounts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ListAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListAccountsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_delegate(self, _from, data, **kwargs):  # noqa: E501
        """Register delegate  # noqa: E501

        Registers as a delegate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.register_delegate(_from, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Registering address (required)
        :param str data: Delegate name in hexadecimal encoded UTF-8 string, 16 bytes of data at maximum (required)
        :param str fee: Transaction fee in nano SEM, default to minimum fee if omitted
        :param str nonce: Transaction nonce, default to sender's nonce if omitted
        :param bool validate_nonce: Whether validate tx nonce against the current account state, default to false if omitted
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.register_delegate_with_http_info(_from, data, **kwargs)  # noqa: E501
        else:
            (data) = self.register_delegate_with_http_info(_from, data, **kwargs)  # noqa: E501
            return data

    def register_delegate_with_http_info(self, _from, data, **kwargs):  # noqa: E501
        """Register delegate  # noqa: E501

        Registers as a delegate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.register_delegate_with_http_info(_from, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Registering address (required)
        :param str data: Delegate name in hexadecimal encoded UTF-8 string, 16 bytes of data at maximum (required)
        :param str fee: Transaction fee in nano SEM, default to minimum fee if omitted
        :param str nonce: Transaction nonce, default to sender's nonce if omitted
        :param bool validate_nonce: Whether validate tx nonce against the current account state, default to false if omitted
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'data', 'fee', 'nonce', 'validate_nonce']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_delegate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `register_delegate`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `register_delegate`")  # noqa: E501

        if '_from' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['_from']):  # noqa: E501
            raise ValueError("Invalid value for parameter `_from` when calling `register_delegate`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'data' in params and not re.search('^(0x)?[0-9a-fA-F]+$', params['data']):  # noqa: E501
            raise ValueError("Invalid value for parameter `data` when calling `register_delegate`, must conform to the pattern `/^(0x)?[0-9a-fA-F]+$/`")  # noqa: E501
        if 'fee' in params and not re.search('^\\d+$', params['fee']):  # noqa: E501
            raise ValueError("Invalid value for parameter `fee` when calling `register_delegate`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'nonce' in params and not re.search('^\\d+$', params['nonce']):  # noqa: E501
            raise ValueError("Invalid value for parameter `nonce` when calling `register_delegate`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'data' in params:
            query_params.append(('data', params['data']))  # noqa: E501
        if 'fee' in params:
            query_params.append(('fee', params['fee']))  # noqa: E501
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))  # noqa: E501
        if 'validate_nonce' in params:
            query_params.append(('validateNonce', params['validate_nonce']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction/delegate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DoTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sign_message(self, address, message, **kwargs):  # noqa: E501
        """Sign a message  # noqa: E501

        Sign a message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sign_message(address, message, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Signing address. The address must exist in the wallet.data of this Semux node. (required)
        :param str message: Message to sign in UTF-8 string (required)
        :return: SignMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sign_message_with_http_info(address, message, **kwargs)  # noqa: E501
        else:
            (data) = self.sign_message_with_http_info(address, message, **kwargs)  # noqa: E501
            return data

    def sign_message_with_http_info(self, address, message, **kwargs):  # noqa: E501
        """Sign a message  # noqa: E501

        Sign a message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sign_message_with_http_info(address, message, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Signing address. The address must exist in the wallet.data of this Semux node. (required)
        :param str message: Message to sign in UTF-8 string (required)
        :return: SignMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'message']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `sign_message`")  # noqa: E501
        # verify the required parameter 'message' is set
        if ('message' not in params or
                params['message'] is None):
            raise ValueError("Missing the required parameter `message` when calling `sign_message`")  # noqa: E501

        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `sign_message`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'message' in params:
            query_params.append(('message', params['message']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sign-message', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SignMessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sign_raw_transaction(self, raw, address, **kwargs):  # noqa: E501
        """Sign an unsigned raw transaction  # noqa: E501

        Sign an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be created using /compose-raw-transaction API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sign_raw_transaction(raw, address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str raw: Unsigned raw transaction encoded in hexadecimal string. (required)
        :param str address: Signer's address. This address must exist in the wallet. (required)
        :return: SignRawTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sign_raw_transaction_with_http_info(raw, address, **kwargs)  # noqa: E501
        else:
            (data) = self.sign_raw_transaction_with_http_info(raw, address, **kwargs)  # noqa: E501
            return data

    def sign_raw_transaction_with_http_info(self, raw, address, **kwargs):  # noqa: E501
        """Sign an unsigned raw transaction  # noqa: E501

        Sign an unsigned raw transaction then return its hexadecimal encoded string. An unsigned raw transaction can be created using /compose-raw-transaction API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sign_raw_transaction_with_http_info(raw, address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str raw: Unsigned raw transaction encoded in hexadecimal string. (required)
        :param str address: Signer's address. This address must exist in the wallet. (required)
        :return: SignRawTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['raw', 'address']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_raw_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'raw' is set
        if ('raw' not in params or
                params['raw'] is None):
            raise ValueError("Missing the required parameter `raw` when calling `sign_raw_transaction`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `sign_raw_transaction`")  # noqa: E501

        if 'raw' in params and not re.search('^(0x)?[0-9a-fA-F]+$', params['raw']):  # noqa: E501
            raise ValueError("Invalid value for parameter `raw` when calling `sign_raw_transaction`, must conform to the pattern `/^(0x)?[0-9a-fA-F]+$/`")  # noqa: E501
        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `sign_raw_transaction`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'raw' in params:
            query_params.append(('raw', params['raw']))  # noqa: E501
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sign-raw-transaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SignRawTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer(self, _from, to, value, **kwargs):  # noqa: E501
        """Transfer coins  # noqa: E501

        Transfers coins to another address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transfer(_from, to, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Sender's address. The address must exist in the wallet.data of this Semux node. (required)
        :param str to: Recipient's address (required)
        :param str value: Amount of SEM to transfer in nano SEM (required)
        :param str fee: Transaction fee in nano SEM, default to minimum fee if omitted
        :param str nonce: Transaction nonce, default to sender's nonce if omitted
        :param bool validate_nonce: Whether validate tx nonce against the current account state, default to false if omitted
        :param str data: Transaction data encoded in hexadecimal string
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.transfer_with_http_info(_from, to, value, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_with_http_info(_from, to, value, **kwargs)  # noqa: E501
            return data

    def transfer_with_http_info(self, _from, to, value, **kwargs):  # noqa: E501
        """Transfer coins  # noqa: E501

        Transfers coins to another address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transfer_with_http_info(_from, to, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Sender's address. The address must exist in the wallet.data of this Semux node. (required)
        :param str to: Recipient's address (required)
        :param str value: Amount of SEM to transfer in nano SEM (required)
        :param str fee: Transaction fee in nano SEM, default to minimum fee if omitted
        :param str nonce: Transaction nonce, default to sender's nonce if omitted
        :param bool validate_nonce: Whether validate tx nonce against the current account state, default to false if omitted
        :param str data: Transaction data encoded in hexadecimal string
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'value', 'fee', 'nonce', 'validate_nonce', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `transfer`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `transfer`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `transfer`")  # noqa: E501

        if '_from' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['_from']):  # noqa: E501
            raise ValueError("Invalid value for parameter `_from` when calling `transfer`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'to' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['to']):  # noqa: E501
            raise ValueError("Invalid value for parameter `to` when calling `transfer`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'value' in params and not re.search('^\\d+$', params['value']):  # noqa: E501
            raise ValueError("Invalid value for parameter `value` when calling `transfer`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'fee' in params and not re.search('^\\d+$', params['fee']):  # noqa: E501
            raise ValueError("Invalid value for parameter `fee` when calling `transfer`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'nonce' in params and not re.search('^\\d+$', params['nonce']):  # noqa: E501
            raise ValueError("Invalid value for parameter `nonce` when calling `transfer`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'data' in params and not re.search('^(0x)?[0-9a-fA-F]+$', params['data']):  # noqa: E501
            raise ValueError("Invalid value for parameter `data` when calling `transfer`, must conform to the pattern `/^(0x)?[0-9a-fA-F]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'fee' in params:
            query_params.append(('fee', params['fee']))  # noqa: E501
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))  # noqa: E501
        if 'validate_nonce' in params:
            query_params.append(('validateNonce', params['validate_nonce']))  # noqa: E501
        if 'data' in params:
            query_params.append(('data', params['data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DoTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unvote(self, _from, to, value, **kwargs):  # noqa: E501
        """Unvote  # noqa: E501

        Unvotes for a delegate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.unvote(_from, to, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Voter's address. The address must exist in the wallet.data of this Semux node. (required)
        :param str to: Delegate address (required)
        :param str value: Number of votes in nano SEM (required)
        :param str fee: Transaction fee in nano SEM, default to minimum fee if omitted
        :param str nonce: Transaction nonce, default to sender's nonce if omitted
        :param bool validate_nonce: Whether validate tx nonce against the current account state, default to false if omitted
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.unvote_with_http_info(_from, to, value, **kwargs)  # noqa: E501
        else:
            (data) = self.unvote_with_http_info(_from, to, value, **kwargs)  # noqa: E501
            return data

    def unvote_with_http_info(self, _from, to, value, **kwargs):  # noqa: E501
        """Unvote  # noqa: E501

        Unvotes for a delegate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.unvote_with_http_info(_from, to, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Voter's address. The address must exist in the wallet.data of this Semux node. (required)
        :param str to: Delegate address (required)
        :param str value: Number of votes in nano SEM (required)
        :param str fee: Transaction fee in nano SEM, default to minimum fee if omitted
        :param str nonce: Transaction nonce, default to sender's nonce if omitted
        :param bool validate_nonce: Whether validate tx nonce against the current account state, default to false if omitted
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'value', 'fee', 'nonce', 'validate_nonce']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unvote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `unvote`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `unvote`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `unvote`")  # noqa: E501

        if '_from' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['_from']):  # noqa: E501
            raise ValueError("Invalid value for parameter `_from` when calling `unvote`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'to' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['to']):  # noqa: E501
            raise ValueError("Invalid value for parameter `to` when calling `unvote`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'value' in params and not re.search('^\\d+$', params['value']):  # noqa: E501
            raise ValueError("Invalid value for parameter `value` when calling `unvote`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'fee' in params and not re.search('^\\d+$', params['fee']):  # noqa: E501
            raise ValueError("Invalid value for parameter `fee` when calling `unvote`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'nonce' in params and not re.search('^\\d+$', params['nonce']):  # noqa: E501
            raise ValueError("Invalid value for parameter `nonce` when calling `unvote`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'fee' in params:
            query_params.append(('fee', params['fee']))  # noqa: E501
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))  # noqa: E501
        if 'validate_nonce' in params:
            query_params.append(('validateNonce', params['validate_nonce']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction/unvote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DoTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_message(self, address, message, signature, **kwargs):  # noqa: E501
        """Verify a message  # noqa: E501

        Verify a signed message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.verify_message(address, message, signature, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of the message signer (required)
        :param str message: Message in UTF-8 string (required)
        :param str signature: Signature to verify (required)
        :return: VerifyMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.verify_message_with_http_info(address, message, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_message_with_http_info(address, message, signature, **kwargs)  # noqa: E501
            return data

    def verify_message_with_http_info(self, address, message, signature, **kwargs):  # noqa: E501
        """Verify a message  # noqa: E501

        Verify a signed message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.verify_message_with_http_info(address, message, signature, async=True)
        >>> result = thread.get()

        :param async bool
        :param str address: Address of the message signer (required)
        :param str message: Message in UTF-8 string (required)
        :param str signature: Signature to verify (required)
        :return: VerifyMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'message', 'signature']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `verify_message`")  # noqa: E501
        # verify the required parameter 'message' is set
        if ('message' not in params or
                params['message'] is None):
            raise ValueError("Missing the required parameter `message` when calling `verify_message`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `verify_message`")  # noqa: E501

        if 'address' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['address']):  # noqa: E501
            raise ValueError("Invalid value for parameter `address` when calling `verify_message`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'signature' in params and not re.search('^(0x)?[0-9a-fA-F]{192}$', params['signature']):  # noqa: E501
            raise ValueError("Invalid value for parameter `signature` when calling `verify_message`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{192}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'message' in params:
            query_params.append(('message', params['message']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/verify-message', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VerifyMessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vote(self, _from, to, value, **kwargs):  # noqa: E501
        """Vote  # noqa: E501

        Votes for a delegate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vote(_from, to, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Voter's address. The address must exist in the wallet.data of this Semux node. (required)
        :param str to: Delegate address (required)
        :param str value: Number of votes in nano SEM (required)
        :param str fee: Transaction fee in nano SEM, default to minimum fee if omitted
        :param str nonce: Transaction nonce, default to sender's nonce if omitted
        :param bool validate_nonce: Whether validate tx nonce against the current account state, default to false if omitted
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vote_with_http_info(_from, to, value, **kwargs)  # noqa: E501
        else:
            (data) = self.vote_with_http_info(_from, to, value, **kwargs)  # noqa: E501
            return data

    def vote_with_http_info(self, _from, to, value, **kwargs):  # noqa: E501
        """Vote  # noqa: E501

        Votes for a delegate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vote_with_http_info(_from, to, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Voter's address. The address must exist in the wallet.data of this Semux node. (required)
        :param str to: Delegate address (required)
        :param str value: Number of votes in nano SEM (required)
        :param str fee: Transaction fee in nano SEM, default to minimum fee if omitted
        :param str nonce: Transaction nonce, default to sender's nonce if omitted
        :param bool validate_nonce: Whether validate tx nonce against the current account state, default to false if omitted
        :return: DoTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'value', 'fee', 'nonce', 'validate_nonce']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `vote`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `vote`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `vote`")  # noqa: E501

        if '_from' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['_from']):  # noqa: E501
            raise ValueError("Invalid value for parameter `_from` when calling `vote`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'to' in params and not re.search('^(0x)?[0-9a-fA-F]{40}$', params['to']):  # noqa: E501
            raise ValueError("Invalid value for parameter `to` when calling `vote`, must conform to the pattern `/^(0x)?[0-9a-fA-F]{40}$/`")  # noqa: E501
        if 'value' in params and not re.search('^\\d+$', params['value']):  # noqa: E501
            raise ValueError("Invalid value for parameter `value` when calling `vote`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'fee' in params and not re.search('^\\d+$', params['fee']):  # noqa: E501
            raise ValueError("Invalid value for parameter `fee` when calling `vote`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        if 'nonce' in params and not re.search('^\\d+$', params['nonce']):  # noqa: E501
            raise ValueError("Invalid value for parameter `nonce` when calling `vote`, must conform to the pattern `/^\\d+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'fee' in params:
            query_params.append(('fee', params['fee']))  # noqa: E501
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))  # noqa: E501
        if 'validate_nonce' in params:
            query_params.append(('validateNonce', params['validate_nonce']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction/vote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DoTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
